defaults: &defaults
  working_directory: /webrtc-streamer
  docker:
    - image: heroku/heroku:18
    
version: 2
jobs:
  # -------------------------------------
  # dowload common tools 
  # -------------------------------------
  setup:
    <<: *defaults
    
    environment:
      WEBRTCROOT: /webrtc 

    steps:     
      - run: apt-get update; apt-get install -y --no-install-recommends autoconf automake libtool git make g++ xz-utils
      - run: git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git /depot_tools
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: mkdir ${WEBRTCROOT} && cd ${WEBRTCROOT} && fetch --no-history --nohooks webrtc 
      - run: cd ${WEBRTCROOT} && sed -i -e "s|'src/resources'],|'src/resources'],'condition':'rtc_include_tests==true',|" src/DEPS 

      - persist_to_workspace:
          root: /
          paths:
            - depot_tools 
            - webrtc
            
  # -------------------------------------
  # build x86_64
  # -------------------------------------
  build_x86_64:
    <<: *defaults
    
    environment:
      GNARGSCOMMON: 'rtc_include_tests=false rtc_enable_protobuf=false use_custom_libcxx=false rtc_include_pulse_audio=false rtc_build_examples=false is_clang=false treat_warnings_as_errors=false' 
      TAR_OPTIONS: --no-same-owner
      WEBRTCROOT: /webrtc 
      GYP_GENERATOR_OUTPUT: "x86_64"
      GNARGS: 'is_debug=false rtc_use_h264=true ffmpeg_branding="Chrome" use_sysroot=false'      

    steps:
      - attach_workspace:
          at: /          
      - checkout
      - run: apt-get update; apt-get install -y --no-install-recommends autoconf automake libtool git make g++ xz-utils libgtk-3-dev libasound2-dev
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: cd ${WEBRTCROOT} && gclient sync 
      - run: cd ${WEBRTCROOT}/src && gn gen ${GYP_GENERATOR_OUTPUT}/out/Release --args="${GNARGSCOMMON} ${GNARGS}" 
      - run: cd ${WEBRTCROOT}/src && ( ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory)
      - run: make live555
      - run: make all tgz 

      - run: mkdir /distrib && cp *.tgz /distrib
      - persist_to_workspace:
          root: /
          paths:
            - distrib 
            
  # -------------------------------------
  # build x86_64
  # -------------------------------------
  build_heroku:
    <<: *defaults
    
    environment:
      GNARGSCOMMON: 'rtc_include_tests=false rtc_enable_protobuf=false use_custom_libcxx=false rtc_include_pulse_audio=false rtc_build_examples=false is_clang=false treat_warnings_as_errors=false' 
      TAR_OPTIONS: --no-same-owner
      WEBRTCROOT: /webrtc 
      GYP_GENERATOR_OUTPUT: "x86_64"
      GNARGS: 'is_debug=false use_ozone=true rtc_use_h264=true ffmpeg_branding="Chrome"'      

    steps:
      - attach_workspace:
          at: /          
      - checkout
      - run: apt-get update; apt-get install -y --no-install-recommends autoconf automake libtool git make g++ xz-utils
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: cd ${WEBRTCROOT} && gclient sync 
      - run: cd ${WEBRTCROOT}/src && gn gen ${GYP_GENERATOR_OUTPUT}/out/Release --args="${GNARGSCOMMON} ${GNARGS}" 
      - run: make live555 alsa-lib
      - run: cd ${WEBRTCROOT}/src && ( ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory)
      - run: make all tgz 

      # deploy on heroku
      - run:
          name: Setup Heroku
          command: |  
            ssh-keyscan -H heroku.com >> ~/.ssh/known_hosts
            cat > ~/.netrc << EOF
            machine api.heroku.com
              login $HEROKU_LOGIN
              password $HEROKU_API_KEY
            EOF
            cat >> ~/.ssh/config << EOF
            VerifyHostKeyDNS yes
            StrictHostKeyChecking no
            EOF
      - add_ssh_keys:
          fingerprints:
            - "9d:ef:66:ee:e1:95:2b:e6:98:05:01:ac:48:5c:53:be"
      - deploy:
          name: "Deploy to Heroku"
          command: git add -f webrtc-streamer && git -c user.name='ci' -c user.email='ci@email.org' commit -m 'force add for heroku deployement' && git push --force git@heroku.com:rtsp2webrtc.git HEAD:refs/heads/master

  # -------------------------------------
  # build for RPI2
  # -------------------------------------
  build_rpi_armv7:
    <<: *defaults
    
    environment:
      GNARGSCOMMON: 'rtc_include_tests=false rtc_enable_protobuf=false use_custom_libcxx=false rtc_include_pulse_audio=false rtc_build_examples=false is_clang=false' 
      TAR_OPTIONS: --no-same-owner
      WEBRTCROOT: /webrtc 
      GYP_GENERATOR_OUTPUT: "rpi-armv7"  
      GNARGS: 'is_debug=false use_ozone=true rtc_use_h264=true ffmpeg_branding="Chrome" target_cpu="arm" treat_warnings_as_errors=false' 
      CROSS: arm-linux-gnueabihf- 

    steps:
      - attach_workspace:
          at: /
      - checkout
      - run: apt-get update; apt-get install -y --no-install-recommends autoconf automake libtool git make g++ xz-utils          
      - run: wget -qO- https://releases.linaro.org/components/toolchain/binaries/6.4-2018.05/arm-linux-gnueabihf/gcc-linaro-6.4.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz  | tar xJ -C /opt 
      - run: echo 'export PATH=/opt/gcc-linaro-6.4.1-2018.05-x86_64_arm-linux-gnueabihf/bin:$PATH' >> $BASH_ENV
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: ${WEBRTCROOT}/src/build/linux/sysroot_scripts/install-sysroot.py --arch=arm
      - run: cd ${WEBRTCROOT} && gclient sync 
      - run: cd ${WEBRTCROOT}/src && gn gen ${GYP_GENERATOR_OUTPUT}/out/Release --args="${GNARGSCOMMON} ${GNARGS}"
      - run: make live555 alsa-lib
      - run: cd ${WEBRTCROOT}/src && ( ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory)
      - run: make all tgz 

      - run: mkdir /distrib && cp *.tgz /distrib
      - persist_to_workspace:
          root: /
          paths:
            - distrib 

  # -------------------------------------
  # build for RPI1/B
  # -------------------------------------
  build_rpi_armv6:
    <<: *defaults
    
    environment:
      GNARGSCOMMON: 'rtc_include_tests=false rtc_enable_protobuf=false use_custom_libcxx=false use_ozone=true rtc_include_pulse_audio=false rtc_build_examples=false is_clang=false' 
      TAR_OPTIONS: --no-same-owner
      WEBRTCROOT: /webrtc 
      GYP_GENERATOR_OUTPUT: "rpi-armv6"  
      GNARGS: 'is_debug=false use_ozone=true target_cpu="arm" treat_warnings_as_errors=false arm_version=6 arm_float_abi="hard" rtc_include_opus=false use_sysroot=false' 
      CROSS: arm-linux-gnueabihf- 
      CFLAGS_EXTRA: "-marm -march=armv6 -mfpu=vfp -mfloat-abi=hard"

    steps:
      - attach_workspace:
          at: /
      - checkout
      - run: apt-get update; apt-get install -y --no-install-recommends autoconf automake libtool git make g++ xz-utils          
      - run: wget -qO- https://releases.linaro.org/components/toolchain/binaries/6.4-2018.05/arm-linux-gnueabihf/gcc-linaro-6.4.1-2018.05-x86_64_arm-linux-gnueabihf.tar.xz  | tar xJ -C /opt 
      - run: echo 'export PATH=/opt/gcc-linaro-6.4.1-2018.05-x86_64_arm-linux-gnueabihf/bin:$PATH' >> $BASH_ENV
      - run: echo 'export PATH=/depot_tools:$PATH' >> $BASH_ENV
      - run: cd ${WEBRTCROOT} && gclient sync 
      - run: sed -e 's|"-mfpu=$arm_fpu"|"-mfpu=$arm_fpu","-marm"|' -i ${WEBRTCROOT}/src/build/config/compiler/BUILD.gn
      - run: cd ${WEBRTCROOT}/src && gn gen ${GYP_GENERATOR_OUTPUT}/out/Release --args="${GNARGSCOMMON} ${GNARGS}"
      - run: make live555 alsa-lib
      - run: cd ${WEBRTCROOT}/src && ( ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory || ninja -C ${GYP_GENERATOR_OUTPUT}/out/Release jsoncpp rtc_json webrtc builtin_audio_decoder_factory)
      - run: make all tgz 

      - run: mkdir /distrib && cp *.tgz /distrib
      - persist_to_workspace:
          root: /
          paths:
            - distrib 


  # -------------------------------------
  # store artifact in circleci
  # -------------------------------------
  store_artifact:
    <<: *defaults
    
    steps:
      - attach_workspace:
          at: /
      - store_artifacts:
          path: /distrib
          
  # -------------------------------------
  # publish artifact on github
  # -------------------------------------
  github_release:
    <<: *defaults
    
    steps:
      - attach_workspace:
          at: /
      - run: curl https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz | tar -C /usr/local -xzf -
      - run: echo 'export PATH=/usr/local/go/bin:/root/go/bin:$PATH' >> $BASH_ENV      
      - run: go get github.com/tcnksm/ghr
      - deploy:
          name: "Deploy to Github"
          command: ghr -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME $CIRCLE_TAG /distrib
          
workflows:
  version: 2
  build:
    jobs:
      - setup:
          filters:
            tags:
              only: /.*/            
      - build_x86_64:
          requires:
            - setup
          filters:
            tags:
              only: /.*/            
      - build_heroku:
          requires:
            - setup
          filters:
            tags:
              only: /.*/            
      - build_rpi_armv7:
          requires:
            - setup
          filters:
            tags:
              only: /.*/            
      - build_rpi_armv6:
          requires:
            - setup
          filters:
            tags:
              only: /.*/            
      - store_artifact:
          requires:
            - build_x86_64
            - build_heroku
            - build_rpi_armv7
            - build_rpi_armv6
          filters:
            tags:
              only: /.*/            
      - github_release:
          requires:
            - store_artifact
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
